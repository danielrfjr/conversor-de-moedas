import com.google.gson.Gson;
import com.google.gson.JsonObject;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class CurrencyConverter {

    private static final String API_KEY = "30a822ba228e29ab0af1ac60";
    private static final String BASE_URL = "https://v6.exchangerate-api.com/v6/";
    private static final HttpClient client = HttpClient.newHttpClient();

    // Defina os códigos das moedas que queremos filtrar
    private static final String[] FILTERED_CURRENCIES = {"ARS", "BOB", "BRL", "CLP", "COP", "USD"};

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        boolean continuar = true;
        while (continuar) {
            System.out.println("### Conversor de Moedas ###");
            System.out.println("Escolha uma opção:");
            System.out.println("1. Converter moeda");
            System.out.println("0. Sair");

            int opcao = scanner.nextInt();
            switch (opcao) {
                case 0:
                    continuar = false;
                    System.out.println("Encerrando o programa...");
                    break;
                case 1:
                    realizarConversao(scanner);
                    break;
                default:
                    System.out.println("Opção inválida. Por favor, escolha novamente.");
                    break;
            }
        }

        scanner.close();
    }

    private static void realizarConversao(Scanner scanner) {
        System.out.println("Digite a quantia a ser convertida:");
        double amount = scanner.nextDouble();

        System.out.println("Digite a moeda de origem (ex: USD):");
        String fromCurrency = scanner.next().toUpperCase();

        System.out.println("Digite a moeda de destino (ex: EUR):");
        String toCurrency = scanner.next().toUpperCase();

        try {
            Map<String, Double> rates = getExchangeRates(fromCurrency);
            double convertedAmount = convertCurrency(amount, fromCurrency, toCurrency, rates);

            System.out.printf("%.2f %s é equivalente a %.2f %s%n", amount, fromCurrency, convertedAmount, toCurrency);
        } catch (Exception e) {
            System.out.println("Ocorreu um erro na conversão: " + e.getMessage());
        }
    }

    private static Map<String, Double> getExchangeRates(String baseCurrency) throws IOException, InterruptedException {
        String urlString = BASE_URL + API_KEY + "/latest/" + baseCurrency;
        URI url = URI.create(urlString);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(url)
                .header("Accept", "application/json")
                .header("User-Agent", "CurrencyConverter/1.0")
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Verificar o código de status da resposta
        if (response.statusCode() != 200) {
            throw new RuntimeException("Falha ao obter taxas de câmbio: " + response.statusCode());
        }

        // Parse o JSON de resposta usando Gson
        Gson gson = new Gson();
        JsonObject jsonResponse = gson.fromJson(response.body(), JsonObject.class);
        JsonObject rates = jsonResponse.getAsJsonObject("conversion_rates");

        // Filtrar as moedas específicas
        Map<String, Double> exchangeRates = new HashMap<>();
        for (String currency : FILTERED_CURRENCIES) {
            if (rates.has(currency)) {
                exchangeRates.put(currency, rates.get(currency).getAsDouble());
            }
        }

        return exchangeRates;
    }

    private static double convertCurrency(double amount, String fromCurrency, String toCurrency, Map<String, Double> rates) {
        if (!rates.containsKey(fromCurrency)) {
            throw new IllegalArgumentException("Moeda de origem inválida.");
        }
        if (!rates.containsKey(toCurrency)) {
            throw new IllegalArgumentException("Moeda de destino inválida.");
        }

        double fromRate = rates.get(fromCurrency);
        double toRate = rates.get(toCurrency);

        // Converter amount da moeda de origem para a moeda de destino
        return amount * (toRate / fromRate);
    }
}
